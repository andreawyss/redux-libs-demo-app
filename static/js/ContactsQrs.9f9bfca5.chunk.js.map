{"version":3,"sources":["_/common/slices/app-slice-group.ts","_/demos/contacts-qrs/slice/contacts.slice.ts","_/demos/contacts-qrs/slice/contacts.selectors.ts","_/utils/log-error.util.ts","_/demos/contacts-qrs/slice/procs/save-contact.proc.ts","_/demos/contacts-qrs/slice/procs/edit-contact.proc.ts","_/demos/contacts-qrs/view/ContactForm.tsx","_/utils/clone.util.ts","_/demos/contacts-qrs/slice/procs/set-order-by.proc.ts","_/demos/contacts-qrs/slice/procs/load-contacts.proc.ts","_/demos/contacts-qrs/slice/procs/set-filter.proc.ts","_/demos/contacts-qrs/slice/procs/delete-contact.proc.ts","_/demos/contacts-qrs/slice/procs/select-contact.proc.ts","_/demos/contacts-qrs/slice/procs/toggle-contact.proc.ts","_/demos/contacts-qrs/view/ContactRow.tsx","_/demos/contacts-qrs/view/ContactsTable.tsx","_/demos/contacts-qrs/slice/procs/edit-new-contact.proc.ts","_/demos/contacts-qrs/view/ContactsView.tsx","_/demos/contacts-qrs/ContactsQrsPage.tsx"],"names":["appSliceGroup","createSliceGroup","name","initialState","checkedContactIds","contacts","deletedContactIds","editContact","undefined","filter","isLoading","isSaving","lastError","orderBy","orderDir","selectedContactId","contactsSlice","createSlice","parent","selectors","checkedContactIdsSelector","contactsSelector","deletedContactIdsSelector","editContactSelector","filterSelector","isLoadingSelector","isSavingSelector","orderBySelector","orderDirSelector","selectedContactIdSelector","activeContactsSelector","createSelector","contact","includes","id","filteredContactsSelector","length","fullName","firstName","lastName","re","RegExp","search","isNameMatch","value","Boolean","indexOf","toLowerCase","stringContains","birthDate","isContactMatch","logError","err","message","response","statusText","data","console","error","saveContactWorker","actions","addCaseReducers","contactSaved","slice","action","payload","saveContact","saveContactError","saveContactAction","CONTACT_SAVED","type","call","saveContactDelegate","put","errorMsg","wretch","apiBaseUrl","json","post","runSaga","saveContactWatch","takeEvery","editContactAction","ContactForm","props","dispatch","useDispatch","useSelector","useState","setContact","useEffect","JSON","parse","stringify","onChange","e","target","canSave","trim","onSubmit","preventDefault","TextField","InputLabelProps","shrink","label","Button","disabled","onClick","color","variant","setOrderByAction","setOrderBy","SET_ORDER_BY","loadContactsWorker","contactsChanged","loadContacts","loadContactsError","loadContactsAction","select","loadContactsDelegate","get","loadContactsWatch","setFilterAction","setFilter","deleteContactWorker","deleteContact","push","deleteContactDone","index","findIndex","item","splice","s","deleteContactError","deleteContactAction","deleteContactDoneAction","deleteContactDelegate","delete","res","deleteContactWatch","selectContactAction","selectContact","toggleContactAction","toggleContact","ContactRow","dateIso","isSelected","isChecked","TableRow","hover","key","role","selected","TableCell","padding","Checkbox","checked","stopPropagation","Typography","format","parseISO","IconButton","cols","ContactsTable","Table","TableHead","map","col","TableSortLabel","active","direction","TableBody","editNewContactAction","editNewContact","ContactsView","classes","useStyles","className","root","Box","content","filterBar","event","spacer","makeStyles","theme","createStyles","flexGrow","spacing","display","flexDirection","toolbar","mixins","ContactsPage"],"mappings":"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","file":"static/js/ContactsQrs.9f9bfca5.chunk.js","sourcesContent":["import { createSliceGroup } from '@vmw/slices-for-redux';\n\nexport const appSliceGroup = createSliceGroup({ name: 'app' });\n","import { createSlice } from '@vmw/slices-for-redux';\nimport { appSliceGroup } from '_/common/slices/app-slice-group';\n\nimport { Contact } from '_/types/contact.type';\n\nexport type ContactsState = {\n  checkedContactIds: number[];\n  contacts: null | Contact[];\n  deletedContactIds: number[];\n  editContact: undefined | Contact;\n  filter: string;\n  isLoading: boolean;\n  isSaving: boolean;\n  lastError: undefined | string;\n  orderBy: string;\n  orderDir: 'desc' | 'asc' | undefined;\n  selectedContactId: number;\n};\n\nconst initialState: ContactsState = {\n  checkedContactIds: [],\n  contacts: null,\n  deletedContactIds: [],\n  editContact: undefined,\n  filter: '',\n  isLoading: false,\n  isSaving: false,\n  lastError: undefined,\n  orderBy: 'firstName',\n  orderDir: 'asc',\n  selectedContactId: 0,\n};\n\nexport const contactsSlice = createSlice<ContactsState>({\n  initialState,\n  name: '$contacts',\n  parent: appSliceGroup,\n});\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { contactsSlice } from './contacts.slice';\nimport { Contact } from '_/types/contact.type';\n\nexport const {\n  checkedContactIds: checkedContactIdsSelector,\n  contacts: contactsSelector,\n  deletedContactIds: deletedContactIdsSelector,\n  editContact: editContactSelector,\n  filter: filterSelector,\n  isLoading: isLoadingSelector,\n  isSaving: isSavingSelector,\n  orderBy: orderBySelector,\n  orderDir: orderDirSelector,\n  selectedContactId: selectedContactIdSelector,\n} = contactsSlice.selectors;\n\nexport const activeContactsSelector = createSelector(\n  deletedContactIdsSelector,\n  contactsSelector,\n  (deletedContactIds, contacts) => {\n    if (!contacts) {\n      return contacts;\n    }\n    return contacts.filter(\n      (contact: Contact) => !deletedContactIds.includes(contact.id)\n    );\n  }\n);\n\nexport const filteredContactsSelector = createSelector(\n  filterSelector,\n  activeContactsSelector,\n  (filter, contacts) => {\n    if (!filter || !contacts) {\n      return contacts;\n    }\n    return (\n      contacts &&\n      contacts.filter((contact: Contact) => isContactMatch(contact, filter))\n    );\n  }\n);\n\nfunction isContactMatch(contact: Contact, filter: string): boolean {\n  return (\n    filter.length > 0 &&\n    (isNameMatch(contact, filter) || stringContains(contact.birthDate, filter))\n  );\n}\n\nfunction isNameMatch(contact: Contact, filter: string): boolean {\n  const fullName = `${contact.firstName} ${contact.lastName}`;\n  try {\n    const re = new RegExp(filter, 'gi');\n    return fullName.search(re) > -1;\n  } catch {\n    return false;\n  }\n}\n\nfunction stringContains(value: string, filter: string): boolean {\n  return Boolean(value && value.indexOf(filter.toLowerCase()) !== -1);\n}\n","export function logError(err: any) {\n  let message = err.message;\n  if (err.response && err.response.statusText) {\n    message = err.response.statusText;\n  }\n  if (err.response && err.response.data) {\n    message = `${message}\\n ${err.response.data}`;\n  }\n  console.error('Error: ', message);\n  return message;\n}\n","import wretch from 'wretch';\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { runSaga } from '@vmw/queue-for-redux-saga';\nimport { call, put, takeEvery } from 'redux-saga/effects';\nimport { apiBaseUrl } from '_/utils/env.utils';\nimport { logError } from '_/utils/log-error.util';\n\nimport { contactsSlice, ContactsState } from '../contacts.slice';\nimport { Contact } from '_/types/contact.type';\n\nconst actions = contactsSlice.addCaseReducers({\n  contactSaved(\n    slice: ContactsState,\n    action: PayloadAction<{ contact: Contact }>\n  ) {\n    const { contact } = action.payload;\n    slice.isSaving = false;\n  },\n\n  saveContact(slice: ContactsState, action: PayloadAction<Contact>) {\n    slice.isSaving = true;\n    slice.lastError = undefined;\n    slice.editContact = undefined;\n  },\n\n  saveContactError(slice: ContactsState, action: PayloadAction<string>) {\n    slice.isSaving = false;\n    slice.lastError = action.payload;\n  },\n});\n\nexport const saveContactAction = actions.saveContact;\nexport const SAVE_CONTACT_ERROR = actions.saveContactError.type;\nexport const CONTACT_SAVED = actions.contactSaved.type;\n\nrunSaga(function* saveContactWatch(): any {\n  yield takeEvery([saveContactAction.type], saveContactWorker);\n});\n\nfunction* saveContactWorker(action: PayloadAction<Contact>): any {\n  try {\n    const contact = yield call(saveContactDelegate, action.payload);\n    yield put(actions.contactSaved({ contact }));\n  } catch (err) {\n    const errorMsg = yield call(logError, err);\n    yield put(actions.saveContactError(errorMsg));\n  }\n}\n\nfunction saveContactDelegate(contact: Contact) {\n  const { id } = contact;\n  if (id) {\n    return wretch(`${apiBaseUrl}/contacts/${id}`).put(contact).json();\n  }\n  return wretch(`${apiBaseUrl}/contacts`).post(contact).json();\n}\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport { Contact } from '_/types/contact.type';\n\nimport { contactsSlice, ContactsState } from '../contacts.slice';\n\nconst actions = contactsSlice.addCaseReducers({\n  editContact: (\n    slice: ContactsState,\n    action: PayloadAction<Contact | undefined>\n  ) => {\n    slice.editContact = action.payload;\n  },\n});\n\nexport const { editContact: editContactAction } = actions;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nimport { clone } from '_/utils/clone.util';\nimport { Contact } from '_/types/contact.type';\nimport { isSavingSelector } from '../slice/contacts.selectors';\nimport { saveContactAction } from '../slice/procs/save-contact.proc';\nimport { editContactAction } from '../slice/procs/edit-contact.proc';\n\ntype Props = {\n  editContact: Contact;\n};\n\nexport function ContactForm(props: Props) {\n  const { editContact } = props;\n\n  const dispatch = useDispatch();\n  const isSaving = useSelector(isSavingSelector);\n\n  const [contact, setContact] = useState({\n    birthDate: '',\n    firstName: '',\n    id: 0,\n    lastName: '',\n  });\n\n  useEffect(() => {\n    setContact(clone(editContact));\n  }, [editContact]);\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setContact({\n      ...contact,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const canSave =\n    contact.firstName.trim() !== '' &&\n    contact.lastName.trim() !== '' &&\n    contact.birthDate.length === 10;\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        dispatch(saveContactAction(contact));\n      }}\n    >\n      <TextField\n        InputLabelProps={{\n          shrink: true,\n        }}\n        label=\"First Name\"\n        name=\"firstName\"\n        onChange={onChange}\n        value={contact.firstName}\n      />\n      <br />\n\n      <TextField\n        InputLabelProps={{\n          shrink: true,\n        }}\n        label=\"Last Name\"\n        name=\"lastName\"\n        onChange={onChange}\n        value={contact.lastName}\n      />\n      <br />\n\n      <TextField\n        InputLabelProps={{\n          shrink: true,\n        }}\n        label=\"Birthday\"\n        name=\"birthDate\"\n        onChange={onChange}\n        type=\"date\"\n        value={contact.birthDate}\n      />\n      <br />\n      <br />\n\n      <div>\n        <Button\n          disabled={isSaving}\n          onClick={() => dispatch(editContactAction())}\n        >\n          Cancel\n        </Button>\n\n        <Button\n          color=\"primary\"\n          disabled={isSaving || !canSave}\n          type=\"submit\"\n          variant=\"contained\"\n        >\n          {isSaving ? 'Saving...' : 'Save'}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","export function clone(value: any): any {\n  if (value === null || value === undefined) {\n    return value;\n  }\n  return JSON.parse(JSON.stringify(value));\n}\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { contactsSlice, ContactsState } from '../contacts.slice';\n\nconst actions = contactsSlice.addCaseReducers({\n  setOrderBy: (slice: ContactsState, action: PayloadAction<string>) => {\n    const orderBy = action.payload;\n    let orderDir: 'asc' | 'desc' = 'asc';\n    if (orderBy === slice.orderBy) {\n      orderDir = slice.orderDir === 'asc' ? 'desc' : 'asc';\n    }\n    slice.orderBy = orderBy;\n    slice.orderDir = orderDir;\n  },\n});\n\nexport const setOrderByAction = actions.setOrderBy;\nexport const SET_ORDER_BY = setOrderByAction.type;\n","/* eslint-disable import/max-dependencies */\nimport wretch from 'wretch';\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { runSaga } from '@vmw/queue-for-redux-saga';\nimport { call, put, select, takeEvery } from 'redux-saga/effects';\nimport { apiBaseUrl } from '_/utils/env.utils';\nimport { logError } from '_/utils/log-error.util';\n\nimport { SET_ORDER_BY } from './set-order-by.proc';\nimport { contactsSlice, ContactsState } from '../contacts.slice';\nimport { orderBySelector, orderDirSelector } from '../contacts.selectors';\nimport { Contact } from '_/types/contact.type';\nimport { CONTACT_SAVED } from './save-contact.proc';\n\nconst actions = contactsSlice.addCaseReducers({\n  contactsChanged(\n    slice: ContactsState,\n    action: PayloadAction<{ contacts: Contact[] }>\n  ) {\n    const { contacts } = action.payload;\n    slice.isLoading = false;\n    slice.contacts = contacts;\n  },\n\n  loadContacts(slice: ContactsState) {\n    slice.isLoading = true;\n    slice.contacts = null;\n    slice.lastError = undefined;\n  },\n\n  loadContactsError(slice: ContactsState, action: PayloadAction<string>) {\n    slice.isLoading = false;\n    slice.lastError = action.payload;\n  },\n});\n\nexport const loadContactsAction = actions.loadContacts;\nexport const LOAD_CONTACTS_ERROR = actions.loadContactsError.type;\nexport const CONTACTS_CHANGED = actions.contactsChanged.type;\n\nrunSaga(function* loadContactsWatch(): any {\n  yield takeEvery(\n    [loadContactsAction.type, SET_ORDER_BY, CONTACT_SAVED],\n    loadContactsWorker\n  );\n});\n\nfunction* loadContactsWorker(): any {\n  try {\n    const orderBy = yield select(orderBySelector);\n    const orderDir = yield select(orderDirSelector);\n    const contacts = yield call(loadContactsDelegate, orderBy, orderDir);\n    yield put(actions.contactsChanged({ contacts }));\n  } catch (err) {\n    const errorMsg = yield call(logError, err);\n    yield put(actions.loadContactsError(errorMsg));\n  }\n}\n\nfunction loadContactsDelegate(orderBy: string, orderDir: string) {\n  return wretch(\n    `${apiBaseUrl}/contacts?orderBy=${orderBy}&orderDir=${orderDir}`\n  )\n    .get()\n    .json();\n}\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { contactsSlice, ContactsState } from '../contacts.slice';\n\nconst actions = contactsSlice.addCaseReducers({\n  setFilter: (slice: ContactsState, action: PayloadAction<string>) => {\n    const filter = action.payload;\n    slice.filter = filter;\n  },\n});\n\nexport const setFilterAction = actions.setFilter;\n","import wretch from 'wretch';\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { runSaga } from '@vmw/queue-for-redux-saga';\nimport { call, put, takeEvery } from 'redux-saga/effects';\nimport { apiBaseUrl } from '_/utils/env.utils';\nimport { logError } from '_/utils/log-error.util';\n\nimport { contactsSlice, ContactsState } from '../contacts.slice';\nimport { Contact } from '_/types/contact.type';\n\nconst actions = contactsSlice.addCaseReducers({\n  deleteContact: (slice: ContactsState, action: PayloadAction<Contact>) => {\n    const { id } = action.payload;\n    if (!slice.deletedContactIds.includes(id)) {\n      slice.deletedContactIds.push(id);\n    }\n  },\n\n  deleteContactDone: (slice: ContactsState, action: PayloadAction<Contact>) => {\n    const { id } = action.payload;\n\n    const { checkedContactIds, contacts, deletedContactIds } = slice;\n    let index = deletedContactIds.findIndex((item) => item === id);\n    if (index !== -1) {\n      deletedContactIds.splice(index, 1);\n    }\n    index = checkedContactIds.findIndex((item) => item === id);\n    if (index !== -1) {\n      checkedContactIds.splice(index, 1);\n    }\n    if (contacts) {\n      index = contacts.findIndex((s) => s.id === id);\n      contacts.splice(index, 1);\n    }\n    if (slice.selectedContactId === id) {\n      slice.selectedContactId = 0;\n    }\n  },\n\n  deleteContactError(\n    slice: ContactsState,\n    action: PayloadAction<{ contact: Contact; errorMsg: string }>\n  ) {\n    const { contact, errorMsg } = action.payload;\n    const { id } = contact;\n    slice.lastError = errorMsg;\n\n    const { deletedContactIds } = slice;\n    const index = deletedContactIds.findIndex((item) => item === id);\n    if (index !== -1) {\n      deletedContactIds.splice(index, 1);\n    }\n  },\n});\n\nexport const deleteContactAction = actions.deleteContact;\nexport const DELETE_CONTACT_ERROR = actions.deleteContactError.type;\n\nconst deleteContactDoneAction = actions.deleteContactDone;\nexport const DELETE_CONTACT_DONE = deleteContactDoneAction.type;\n\nrunSaga(function* deleteContactWatch(): any {\n  yield takeEvery(actions.deleteContact.type, deleteContactWorker);\n});\n\nfunction* deleteContactWorker(action: PayloadAction<Contact>): any {\n  const contact = action.payload;\n  try {\n    yield call(deleteContactDelegate, contact.id);\n    yield put(deleteContactDoneAction(contact));\n  } catch (err) {\n    const errorMsg = yield call(logError, err);\n    yield put(actions.deleteContactError({ contact, errorMsg }));\n  }\n}\n\nfunction deleteContactDelegate(id: number) {\n  return wretch(`${apiBaseUrl}/contacts/${id}`).delete().res();\n}\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { contactsSlice, ContactsState } from '../contacts.slice';\nimport { Contact } from '_/types/contact.type';\n\nconst actions = contactsSlice.addCaseReducers({\n  selectContact: (slice: ContactsState, action: PayloadAction<Contact>) => {\n    const contact = action.payload;\n    if (slice.selectedContactId && slice.selectedContactId === contact.id) {\n      slice.selectedContactId = 0;\n    } else {\n      slice.selectedContactId = contact.id;\n    }\n  },\n});\n\nexport const selectContactAction = actions.selectContact;\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { contactsSlice, ContactsState } from '../contacts.slice';\nimport { Contact } from '_/types/contact.type';\n\nconst actions = contactsSlice.addCaseReducers({\n  toggleContact: (slice: ContactsState, action: PayloadAction<Contact>) => {\n    const { id } = action.payload;\n    const { checkedContactIds } = slice;\n    const index = checkedContactIds.indexOf(id);\n    if (index === -1) {\n      checkedContactIds.push(id);\n    } else {\n      checkedContactIds.splice(index, 1);\n    }\n  },\n});\n\nexport const toggleContactAction = actions.toggleContact;\n","/* eslint-disable import/max-dependencies */\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { format, parseISO } from 'date-fns';\nimport { Contact } from '_/types/contact.type';\nimport {\n  checkedContactIdsSelector,\n  selectedContactIdSelector,\n} from '../slice/contacts.selectors';\nimport { deleteContactAction } from '../slice/procs/delete-contact.proc';\nimport { selectContactAction } from '../slice/procs/select-contact.proc';\nimport { toggleContactAction } from '../slice/procs/toggle-contact.proc';\n\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { editContactAction } from '../slice/procs/edit-contact.proc';\n\ntype Props = {\n  contact: Contact;\n};\n\nexport function ContactRow(props: Props): React.ReactElement<any> {\n  const { contact } = props;\n\n  const dispatch = useDispatch();\n  const selectedContactId = useSelector(selectedContactIdSelector);\n  const isSelected = selectedContactId === contact.id;\n\n  const checkedContactIds = useSelector(checkedContactIdsSelector);\n  const isChecked = checkedContactIds.includes(contact.id);\n\n  return (\n    <TableRow\n      hover\n      key={contact.id}\n      onClick={() => dispatch(selectContactAction(contact))}\n      role=\"checkbox\"\n      selected={isSelected}\n    >\n      <TableCell padding=\"checkbox\">\n        <Checkbox\n          checked={isChecked}\n          color=\"primary\"\n          onChange={() => {\n            dispatch(toggleContactAction(contact));\n          }}\n          onClick={(e) => {\n            e.stopPropagation();\n          }}\n        />\n      </TableCell>\n      <TableCell>\n        <Typography>{contact.firstName}</Typography>\n      </TableCell>\n      <TableCell>\n        <Typography>{contact.lastName}</Typography>\n      </TableCell>\n      <TableCell>\n        <Typography>{formatDate(contact.birthDate)}</Typography>\n      </TableCell>\n      <TableCell>\n        <IconButton\n          color=\"primary\"\n          onClick={(e) => {\n            e.stopPropagation();\n            dispatch(editContactAction(contact));\n          }}\n        >\n          <EditIcon />\n        </IconButton>\n        <IconButton\n          color=\"secondary\"\n          onClick={(e) => {\n            e.stopPropagation();\n            dispatch(deleteContactAction(contact));\n          }}\n        >\n          <DeleteIcon />\n        </IconButton>\n      </TableCell>\n    </TableRow>\n  );\n}\n\nfunction formatDate(dateIso: string) {\n  return format(parseISO(dateIso), 'MMM d, yyyy');\n}\n","/* eslint-disable import/max-dependencies */\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Contact } from '_/types/contact.type';\nimport { orderBySelector, orderDirSelector } from '../slice/contacts.selectors';\nimport { setOrderByAction } from '../slice/procs/set-order-by.proc';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\n\nimport { ContactRow } from './ContactRow';\n\nconst cols = [\n  { id: 'firstName', label: 'First Name' },\n  { id: 'lastName', label: 'Last Name' },\n  { id: 'birthDate', label: 'Born' },\n];\n\ntype Props = {\n  contacts: null | Contact[];\n};\n\nexport function ContactsTable(props: Props) {\n  const { contacts } = props;\n\n  const dispatch = useDispatch();\n  const orderBy = useSelector(orderBySelector);\n  const orderDir = useSelector(orderDirSelector);\n\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell padding=\"checkbox\" />\n\n          {cols.map((col) => (\n            <TableCell\n              key={col.id}\n              onClick={() => dispatch(setOrderByAction(col.id))}\n            >\n              <TableSortLabel active={orderBy === col.id} direction={orderDir}>\n                {col.label}\n              </TableSortLabel>\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n\n      <TableBody>\n        {contacts &&\n          contacts.map((contact: any) => (\n            <ContactRow contact={contact} key={contact.id} />\n          ))}\n      </TableBody>\n    </Table>\n  );\n}\n","import { contactsSlice, ContactsState } from '../contacts.slice';\n\nconst actions = contactsSlice.addCaseReducers({\n  editNewContact: (slice: ContactsState) => {\n    slice.editContact = {\n      birthDate: '',\n      firstName: '',\n      id: 0,\n      lastName: '',\n    };\n  },\n});\n\nexport const { editNewContact: editNewContactAction } = actions;\n","/* eslint-disable import/max-dependencies */\nimport React, { useEffect } from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  filteredContactsSelector,\n  isLoadingSelector,\n  filterSelector,\n} from '../slice/contacts.selectors';\nimport { loadContactsAction } from '../slice/procs/load-contacts.proc';\nimport { setFilterAction } from '../slice/procs/set-filter.proc';\n\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nimport { ContactsTable } from './ContactsTable';\nimport { editNewContactAction } from '../slice/procs/edit-new-contact.proc';\n\nexport function ContactsView() {\n  const dispatch = useDispatch();\n  const filter = useSelector(filterSelector);\n  const isLoading = useSelector(isLoadingSelector);\n  const contacts = useSelector(filteredContactsSelector);\n\n  useEffect(() => {\n    dispatch(loadContactsAction());\n  }, [dispatch]);\n\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Box className={classes.content}>\n        <div className={classes.filterBar}>\n          <TextField\n            label=\"Filter\"\n            onChange={(event: any) =>\n              dispatch(setFilterAction(event.target.value))\n            }\n            value={filter}\n          />\n          <span className={classes.spacer} />\n          <Button\n            color=\"primary\"\n            onClick={() => dispatch(editNewContactAction())}\n            variant=\"contained\"\n          >\n            Add New\n          </Button>\n\n          <Button\n            disabled={isLoading}\n            onClick={() => dispatch(loadContactsAction())}\n            variant=\"outlined\"\n          >\n            {isLoading ? 'Loading...' : 'Re-Load'}\n          </Button>\n        </div>\n        <hr />\n        <ContactsTable contacts={contacts} />\n      </Box>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(2),\n    },\n    filterBar: {\n      display: 'flex',\n      flexDirection: 'row',\n    },\n\n    root: {\n      display: 'flex',\n    },\n    spacer: {\n      flexGrow: 1,\n    },\n    toolbar: theme.mixins.toolbar,\n  })\n);\n","/* eslint-disable import/max-dependencies */\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { editContactSelector } from './slice/contacts.selectors';\n\nimport { ContactForm } from './view/ContactForm';\nimport { ContactsView } from './view/ContactsView';\n\nfunction ContactsPage() {\n  const editContact = useSelector(editContactSelector);\n  return (\n    <div>\n      {editContact ? (\n        <ContactForm editContact={editContact} />\n      ) : (\n        <ContactsView />\n      )}\n    </div>\n  );\n}\n\n// eslint-disable-next-line import/no-default-export\nexport default ContactsPage;\n"],"sourceRoot":""}