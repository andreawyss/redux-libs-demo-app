{"version":3,"sources":["_/demos/todos-sfr/todos/slice/todos.slice.ts","_/demos/todos-sfr/todos/slice/procs/add-todo.proc.ts","_/demos/todos-sfr/todos/view/AddTodoForm.tsx","_/demos/todos-sfr/filter/slice/filter.slice.ts","_/demos/todos-sfr/filter/slice/filter.selectors.ts","_/demos/todos-sfr/todos/slice/todos.selectors.ts","_/demos/todos-sfr/todos/slice/procs/toggle-todo.proc.ts","_/demos/todos-sfr/todos/view/TodoListItem.tsx","_/demos/todos-sfr/todos/view/VisibleTodoList.tsx","_/demos/todos-sfr/filter/slice/procs/set-visibility-filter.proc.ts","_/demos/todos-sfr/filter/view/FilterButton.tsx","_/demos/todos-sfr/filter/view/Footer.tsx","_/demos/todos-sfr/TodosSfrPage.tsx"],"names":["todosSlice","createSlice","initialState","name","nextTodoId","addTodo","addCaseReducers","prepare","text","payload","id","reducer","state","action","push","completed","AddTodoForm","useState","todoText","setTodoText","dispatch","useDispatch","onSubmit","e","preventDefault","onChange","target","value","disabled","trim","type","VisibilityFilters","visibilityFilterSlice","visibilityFilterSelector","selector","todosSelector","visibleTodosSelector","createSelector","todos","filter","t","Error","toggleTodo","todo","find","TodoListItem","onClick","style","textDecoration","VisibleTodoList","useSelector","map","key","setVisibilityFilter","FilterButton","props","children","activeFilter","marginLeft","Footer","TodosSfrPage"],"mappings":"qLAKaA,EAAaC,YAAwB,CAChDC,aAAc,GACdC,KAAM,WCHJC,EAAa,EAiBFC,EAfCL,EAAWM,gBAAgB,CACzCD,QAAS,CACPE,QADO,SACCC,GACN,MAAO,CAAEC,QAAS,CAAEC,GAAIN,IAAcI,UAExCG,QAJO,SAKLC,EACAC,GACC,IAAD,EACqBA,EAAOJ,QAApBC,EADR,EACQA,GAAIF,EADZ,EACYA,KACZI,EAAME,KAAK,CAAEC,WAAW,EAAOL,KAAIF,aAK1BH,QCjBR,SAASW,IAAe,IAAD,EACIC,mBAAS,IADb,mBACrBC,EADqB,KACXC,EADW,KAEtBC,EAAWC,cAKjB,OACE,0BACEC,SAAU,SAACC,GACTA,EAAEC,iBACFJ,EAASf,EAAQa,IACjBC,EAAY,MAGd,2BAAOM,SAXM,SAACF,GAAD,OACfJ,EAAYI,EAAEG,OAAOC,QAUQA,MAAOT,IAClC,4BAAQU,UAAWV,EAASW,OAAQC,KAAK,UAAzC,a,YChBOC,EACE,cADFA,EAED,WAFCA,EAGK,iBAKZ7B,EAAsC6B,EAE/BC,EAAwB/B,YAAmC,CACtEC,eACAC,KAAM,sBCZK8B,EAFSD,EAAsBE,SCK/BC,EAFSnC,EAAWkC,SAIpBE,EAAuBC,YAClC,CAACF,EAAeF,IAChB,SAACK,EAAOC,GACN,OAAQA,GACN,KAAKR,EACH,OAAOO,EACT,KAAKP,EACH,OAAOO,EAAMC,QAAO,SAACC,GAAD,OAAOA,EAAEzB,aAC/B,KAAKgB,EACH,OAAOO,EAAMC,QAAO,SAACC,GAAD,OAAQA,EAAEzB,aAChC,QACE,MAAM,IAAI0B,MAAJ,0BAA6BF,QCP5BG,EATC1C,EAAWM,gBAAgB,CACzCoC,WAAY,SAAC9B,EAAmBC,GAC9B,IAAM8B,EAAO/B,EAAMgC,MAAK,SAACD,GAAD,OAAUA,EAAKjC,KAAOG,EAAOJ,WACjDkC,IACFA,EAAK5B,WAAa4B,EAAK5B,cAKd2B,WCFR,SAASG,EAAT,GAA4D,IAApC9B,EAAmC,EAAnCA,UAAW+B,EAAwB,EAAxBA,QAAStC,EAAe,EAAfA,KACjD,OACE,wBACEsC,QAASA,EACTC,MAAO,CACLC,eAAgBjC,EAAY,eAAiB,SAG9CP,GCbA,SAASyC,IACd,IAAM7B,EAAWC,cACXiB,EAAQY,YAAYd,GAE1B,OACE,4BACGE,EAAMa,KAAI,SAACR,GAAD,OACT,kBAACE,EAAD,eACEO,IAAKT,EAAKjC,IACNiC,EAFN,CAGEG,QAAS,kBAAM1B,EAASsB,EAAWC,EAAKjC,aCRlD,IASe2C,EATCrB,EAAsB1B,gBAAgB,CACpD+C,oBAAqB,SACnBzC,EACAC,GAEA,OAAOA,EAAOJ,WAIH4C,oBCNR,SAASC,EAAaC,GAAe,IAClCC,EAAqBD,EAArBC,SAAUjB,EAAWgB,EAAXhB,OAEZnB,EAAWC,cACXoC,EAAeP,YAAYjB,GAEjC,OACE,4BACEL,SAAU6B,IAAiBlB,EAC3BO,QAAS,kBAAM1B,EAASiC,EAAoBd,KAC5CQ,MAAO,CACLW,WAAY,QAGbF,GCrBA,SAASG,IACd,OACE,6BACE,wCACA,kBAACL,EAAD,CAAcf,OAAQR,GAAtB,OACA,kBAACuB,EAAD,CAAcf,OAAQR,GAAtB,UACA,kBAACuB,EAAD,CAAcf,OAAQR,GAAtB,cCIS6B,UATM,kBACnB,6BACE,kBAAC5C,EAAD,MACA,kBAACiC,EAAD,MACA,kBAACU,EAAD","file":"static/js/TodosSfr.bab14639.chunk.js","sourcesContent":["import { createSlice } from '@vmw/slices-for-redux';\nimport { Todo } from '_/types/todo.type';\n\nexport type TodosState = Todo[];\n\nexport const todosSlice = createSlice<TodosState>({\n  initialState: [],\n  name: '$todos',\n});\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { todosSlice, TodosState } from '../todos.slice';\n\nlet nextTodoId = 0;\n\nconst actions = todosSlice.addCaseReducers({\n  addTodo: {\n    prepare(text: string) {\n      return { payload: { id: nextTodoId++, text } };\n    },\n    reducer(\n      state: TodosState,\n      action: PayloadAction<{ id: number; text: string }>\n    ) {\n      const { id, text } = action.payload;\n      state.push({ completed: false, id, text });\n    },\n  },\n});\n\nexport const { addTodo } = actions;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addTodo } from '../slice/procs/add-todo.proc';\n\nexport function AddTodoForm() {\n  const [todoText, setTodoText] = useState('');\n  const dispatch = useDispatch();\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setTodoText(e.target.value);\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        dispatch(addTodo(todoText));\n        setTodoText('');\n      }}\n    >\n      <input onChange={onChange} value={todoText} />\n      <button disabled={!todoText.trim()} type=\"submit\">\n        Add Todo\n      </button>\n    </form>\n  );\n}\n","import { createSlice } from '@vmw/slices-for-redux';\n\nexport type VisibilityFilter = 'SHOW_ACTIVE' | 'SHOW_ALL' | 'SHOW_COMPLETED';\n\nexport const VisibilityFilters: { [k: string]: VisibilityFilter } = {\n  SHOW_ACTIVE: 'SHOW_ACTIVE',\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n};\n\nexport type VisibilityFilterState = VisibilityFilter;\n\nconst initialState: VisibilityFilterState = VisibilityFilters.SHOW_ALL;\n\nexport const visibilityFilterSlice = createSlice<VisibilityFilterState>({\n  initialState,\n  name: '$visibilityFilter',\n});\n","import { visibilityFilterSlice } from './filter.slice';\n\nconst sliceSelector = visibilityFilterSlice.selector;\n\nexport const visibilityFilterSelector = sliceSelector;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { visibilityFilterSelector } from '../../filter/slice/filter.selectors';\nimport { VisibilityFilters } from '../../filter/slice/filter.slice';\nimport { todosSlice } from './todos.slice';\n\nconst sliceSelector = todosSlice.selector;\n\nexport const todosSelector = sliceSelector;\n\nexport const visibleTodosSelector = createSelector(\n  [todosSelector, visibilityFilterSelector],\n  (todos, filter) => {\n    switch (filter) {\n      case VisibilityFilters.SHOW_ALL:\n        return todos;\n      case VisibilityFilters.SHOW_COMPLETED:\n        return todos.filter((t) => t.completed);\n      case VisibilityFilters.SHOW_ACTIVE:\n        return todos.filter((t) => !t.completed);\n      default:\n        throw new Error(`Unknown filter: ${filter}`);\n    }\n  }\n);\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { todosSlice, TodosState } from '../todos.slice';\n\nconst actions = todosSlice.addCaseReducers({\n  toggleTodo: (state: TodosState, action: PayloadAction<number>) => {\n    const todo = state.find((todo) => todo.id === action.payload);\n    if (todo) {\n      todo.completed = !todo.completed;\n    }\n  },\n});\n\nexport const { toggleTodo } = actions;\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\nimport React from 'react';\n\ntype Props = {\n  completed: boolean;\n  onClick: () => void;\n  text: string;\n};\n\nexport function TodoListItem({ completed, onClick, text }: Props) {\n  return (\n    <li\n      onClick={onClick}\n      style={{\n        textDecoration: completed ? 'line-through' : 'none',\n      }}\n    >\n      {text}\n    </li>\n  );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { visibleTodosSelector } from '../slice/todos.selectors';\nimport { toggleTodo } from '../slice/procs/toggle-todo.proc';\nimport { TodoListItem } from './TodoListItem';\n\nexport function VisibleTodoList() {\n  const dispatch = useDispatch();\n  const todos = useSelector(visibleTodosSelector);\n\n  return (\n    <ul>\n      {todos.map((todo) => (\n        <TodoListItem\n          key={todo.id}\n          {...todo}\n          onClick={() => dispatch(toggleTodo(todo.id))}\n        />\n      ))}\n    </ul>\n  );\n}\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport {\n  visibilityFilterSlice,\n  VisibilityFilter,\n  VisibilityFilterState,\n} from '../filter.slice';\n\nconst actions = visibilityFilterSlice.addCaseReducers({\n  setVisibilityFilter: (\n    state: VisibilityFilterState,\n    action: PayloadAction<VisibilityFilter>\n  ) => {\n    return action.payload;\n  },\n});\n\nexport const { setVisibilityFilter } = actions;\n","import React, { ReactNode } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { visibilityFilterSelector } from '../slice/filter.selectors';\nimport { VisibilityFilter } from '../slice/filter.slice';\nimport { setVisibilityFilter } from '../slice/procs/set-visibility-filter.proc';\n\ntype Props = {\n  children: ReactNode;\n  filter: VisibilityFilter;\n};\n\nexport function FilterButton(props: Props) {\n  const { children, filter } = props;\n\n  const dispatch = useDispatch();\n  const activeFilter = useSelector(visibilityFilterSelector);\n\n  return (\n    <button\n      disabled={activeFilter === filter}\n      onClick={() => dispatch(setVisibilityFilter(filter))}\n      style={{\n        marginLeft: '4px',\n      }}\n    >\n      {children}\n    </button>\n  );\n}\n","import React from 'react';\nimport { FilterButton } from './FilterButton';\nimport { VisibilityFilters } from '../slice/filter.slice';\n\nexport function Footer() {\n  return (\n    <div>\n      <span>Show: </span>\n      <FilterButton filter={VisibilityFilters.SHOW_ALL}>All</FilterButton>\n      <FilterButton filter={VisibilityFilters.SHOW_ACTIVE}>Active</FilterButton>\n      <FilterButton filter={VisibilityFilters.SHOW_COMPLETED}>\n        Completed\n      </FilterButton>\n    </div>\n  );\n}\n","import React from 'react';\nimport { AddTodoForm } from './todos/view/AddTodoForm';\nimport { VisibleTodoList } from './todos/view/VisibleTodoList';\nimport { Footer } from './filter/view/Footer';\n\nconst TodosSfrPage = () => (\n  <div>\n    <AddTodoForm />\n    <VisibleTodoList />\n    <Footer />\n  </div>\n);\n\n// eslint-disable-next-line import/no-default-export\nexport default TodosSfrPage;\n"],"sourceRoot":""}